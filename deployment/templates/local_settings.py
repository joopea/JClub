"""
   Local settings generated by fabric deployment

   Date: {{ release_time }}
   Revision: {{ release }}
   User: {{ user }}
"""

from settings.defaults import *

INSTANCE_TYPE = 'www'
DEBUG = {{ debug }}
TEMPLATE_DEBUG = DEBUG

PROJECT_CODE = '{{ project_code }}'

PROJECT_DIR = '{{ base_path }}source/'

MEDIA_ROOT = '{{ media_path }}'
STATIC_ROOT = '{{ static_path }}'

ALLOWED_HOSTS = [
    '{{ hostname }}',
]

# Database settings
DATABASES = {
    'default': {
        'ENGINE': '{{ db_engine }}',
        'NAME': '{{ db_name }}',
        'USER': '{{ db_user }}',
        'PASSWORD': '{{ db_password }}',
        'HOST': '{{ db_host }}',
        'PORT': '',
        {% if db_storage_engine %}
        'STORAGE_ENGINE': '{{ db_storage_engine }}',
        {% endif %}
        {% if db_options %}
        'OPTIONS': {
            {% for option, setting in db_options.iteritems() %}
            '{{ option }}': '{{ setting }}',
            {% endfor %}
        },
        {% endif %}
    }
}

CACHES = {
    'default': {
        'BACKEND': 'memcached_hashring.backend.MemcachedHashRingCache',
        'LOCATION': [
            {% for host in memcached_hosts %}
            '{{ host }}:11211',
            {% endfor %}
        ],
        'TIMEOUT': 60 * 60 * 24,
        'OPTIONS': {
            'socket_timeout': 1,
        }
    }
}

# Logging settings
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'root': {
        'level': 'WARNING',
        'handlers': ['syslog'],
    },
    'formatters': {
        'verbose': {
            'format': '{{ project_code }}: (%(levelname)s:%(name)s) %(message)s',
        },
    },
    'handlers': {
        'syslog': {
            'level': 'ERROR',
            'class': 'logging.handlers.SysLogHandler',
            'address': '/dev/log',
            'formatter': 'verbose',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'verbose',
        }
    },
    'loggers': {
        '': {
            'level': 'ERROR',
            'handlers': ['mail_admins', 'syslog'],
            'propagate': False
        },
        'django.request': {
            'level': 'ERROR',
            'handlers': ['mail_admins', 'syslog'],
            'propagate': False
        },
        ''
        'django.db.backends': {
            'level': 'ERROR',
            'handlers': ['mail_admins', 'syslog'],
            'propagate': False,
        },
    },
}

SHORTURL_BASE = "//{{ hostname_shorturl }}/"

# Exception email settings
EMAIL_SUBJECT_PREFIX = '[{{ project_env }}] '
ADMINS = (
    ('{{ project_env }}', 'exceptions@getlogic.nl'),
)
MANAGERS = ADMINS
SERVER_EMAIL = '{{ project_name }}@projects.getlogic.nl'


# Email settings
EMAIL_BACKEND = 'apps.core.email_backend.WhitelistEmailBackend'
EMAIL_BACKEND_BASE = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_WHITELIST = {{ email_use_whitelist }}
EMAIL_FILTER_WHITELIST = [
    r'[^@]+@getlogic\.nl$',
    r'[^@]+@projects\.getlogic\.nl$',
]

DEFAULT_FROM_EMAIL = 'no-reply@{{ hostname }}'

MONITOR_URL_PATH = r'^{{ monitor_url }}$'

SESSION_COOKIE_NAME = '{{ project_env }}_session'
SESSION_COOKIE_DOMAIN = '{{ hostname }}'
SESSION_EXCLUDED_URLS = [
    MONITOR_URL_PATH,
]

# Template settings
# TEMPLATE_LOADERS = (
#     'django_jinja.loaders.AppLoader',
#     'django_jinja.loaders.FileSystemLoader',
# )

# Compressor settings
COMPRESS_ROOT = STATIC_ROOT
COMPRESS_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"
COMPRESS_PRECOMPILERS = (
    ('text/x-scss', 'sass --scss --cache-location /tmp/.sass-cache/ {infile} {outfile}'),
)

# Assures the proper locale directory is always loaded, even when using a different settings file
LOCALE_PATHS = (
    '{{ release_path }}{{ django_path }}locale',
)

SECURE_SSL_REDIRECT = True
SECURE_SSL_HOST = '{{ hostname }}'
SESSION_COOKIE_SECURE = True

SECRET_KEY = '{{ django_secret_key }}'

AWS_STORAGE_BUCKET_NAME = "{{ aws_storage_bucket_name }}"
AWS_ACCESS_KEY_ID = "{{ aws_access_key_id }}"
AWS_SECRET_ACCESS_KEY = "{{ aws_secret_access_key}}"
AWS_AUTO_CREATE_BUCKET = {{ aws_auto_create_bucket }}
AWS_CALLING_FORMAT = OrdinaryCallingFormat
AWS_S3_FILE_OVERWRITE = {{ aws_s3_file_overwrite }}
# AWS_S3_HOST = "{{ aws_s3_host }}"
AWS_S3_CUSTOM_DOMAIN = '{{ hostname_media }}'
